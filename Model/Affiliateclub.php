<?php

class Cammino_Affiliateclub_Model_Affiliateclub extends Mage_Core_Model_Abstract
{
	
	public function __construct()
	{
		parent::_construct();
        $this->helper = Mage::helper('affiliateclub');
        $this->_init('affiliateclub/affiliateclub');
	}

	/**
    * Aplica o cupom de desconto manualmente
    *
    * @return boolean
    */
    public function applyCoupon($couponCode)
    {
        $couponCode = (string) $couponCode;

        if (!$couponCode or !strlen($couponCode)) {
            return false;
        }

        try{
            $session = Mage::getSingleton('checkout/session');
            $cart = Mage::getSingleton('checkout/cart')->getQuote();
            $cart->getShippingAddress()->setCollectShippingRates(true);
            $cart->setCouponCode(strlen($couponCode) ? $couponCode : '')->collectTotals()->save();

            $this->helper->log("Aplicou o cupom do indicado: " . $couponCode);
            return true;

        }catch (Mage_Core_Exception $e) {
            $this->helper->log("Erro ao aplicar o cupom: " . $couponCode . ", Detalhes erro: " . $e);
        } catch (Exception $e) {
            $this->helper->log("Erro ao aplicar o cupom: " . $couponCode . ", Detalhes erro: " . $e);
        }
    }


    /**
    * Salva informações do pedido feito por indicação no banco
    *
    * @return null
    */
    public function saveAffiliateOrder($order, $indicatorEmail)
    {
        $dateNow = new DateTime();
        
        $indicated = Mage::getModel('customer/customer')->load($order->getCustomerId());
        $indicator = Mage::getModel("customer/customer")->setWebsiteId(Mage::app()->getStore()->getWebsiteId())->loadByEmail($indicatorEmail);

        $data = array(
            'indicator_id'          => $indicator->getId(),
            'indicator_email'       => $indicatorEmail,
            'indicated_id'          => $indicated->getId(),
            'indicated_email'       => $indicated->getEmail(),
            'indicated_coupon'      => $order->coupon_code,
            'order_id'              => $order->getId(),
            'order_increment_id'    => $order->getIncrementId(),
            'created_at'            => $dateNow->getTimestamp(),
            'updated_at'            => $dateNow->getTimestamp()
        );
        
        $model = Mage::getModel('affiliateclub/affiliateclub')->addData($data);
        
        try {
            $model->save();
        } catch (Exception $e) {
            $this->helper->log($e->getMessage());
        }
    }

    /**
    * Gera um cupom de desconto único
    *
    * @return string
    */
    public function generateCoupon()
    {
        $coupon = false;

        try{
            $generator = Mage::getModel('salesrule/coupon_massgenerator');
            $generator->setFormat( Mage_SalesRule_Helper_Coupon::COUPON_FORMAT_ALPHANUMERIC );
            $generator->setDash(0);
            $generator->setLength(12);
            $generator->setPrefix("");
            $generator->setSuffix("");

            $rule = Mage::getModel('salesrule/rule')->load(3);
            $rule->setCouponCodeGenerator($generator);
            $rule->setCouponType( Mage_SalesRule_Model_Rule::COUPON_TYPE_AUTO );

            $coupon = $rule->acquireCoupon();
            $coupon->setType(Mage_SalesRule_Helper_Coupon::COUPON_TYPE_SPECIFIC_AUTOGENERATED)->save();
            return $coupon->getCode();

        } catch (Exception $e) {
            $this->helper->log($e->getMessage());
        }
    }

    /**
    * Insere o cupom gerado para o indicador
    *
    * @return boolean
    */
    public function saveIndicatorCoupon($order, $indicatorCoupon)
    {
        try{
            $dateNow = new DateTime();
            $collection = mage::getModel('affiliateclub/affiliateclub')
            ->getCollection()
            ->addFieldToFilter('order_id', $order->getId());

            $collection->getFirstItem()
                       ->setIndicatorCoupon($indicatorCoupon)
                       ->setUpdatedAt($dateNow->getTimestamp())
                       ->save();
            
            return true;
        } catch (Exception $e) {
            $this->helper->log($e->getMessage());
        }        
    }
}